name: CMake

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Build_SEAL:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    
    - name: Rename SEALConfig.cmake.in
      run: |
        cd SEAL-3.6.5
        cp ./cmake/SEALConfig.cmake.in ./SEALConfig.cmake
    
    - name: Build SEAL
      run: |
        cmake -S ${{github.workspace}} -B build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/SEAL
        cmake --build build --config ${{env.BUILD_TYPE}}
        sudo cmake --install build
        
  
  Build_Project:
    runs-on: ubuntu-latest
    needs: Build_SEAL
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}} -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
      
